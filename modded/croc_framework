#!/bin/bash
# Key Croc Framework
# (c) Hak5 2019
#
# Credits/props
# @0xdade - protected arming mode concept

export PATH=$PATH:/usr/local/croc/bin:/tools

#use set DEBUG ON in config.txt
DEBUG_MODE="false"
STORAGE_FULL="false"

#Uncomment for _extremely verbose debug_
#exec >> /root/verbose_framework_debug.log
#exec 2>&1
#set -x
#echo $$

export WIFI_CONFIG_PATH="/etc/wpa_supplicant.conf"
export CROC_CONFIG_PATH="/root/udisk/config.txt"
#*****************************************************************************************
export AP_CONFIG_PATH="/etc/hostapd/hostapd.conf"
#*****************************************************************************************
export DEBUG_LOG_PATH="/root/loot/croc_framework_debug.log"
WIFI_SSID=""
WIFI_PASS=""
#*****************************************************************************************
WIFI_AP="DISABLE"
WIFI_HIDE_AP="DISABLE"
MATCHLESS="ENABLE"
AUTO_ATTACKMODE="DISABLE"
#*****************************************************************************************
SSH="DISABLE"
DNS="8.8.8.8 1.1.1.1"
ARMING_PASS=""
VID=""
PID=""
PROD=""
MAN=""

function croclog(){
  if [[ "${DEBUG_MODE}" == "true" ]]; then
      if [[ "${STORAGE_FULL}" == "false" ]];then
          echo -e "$1\n" >> "${DEBUG_LOG_PATH}"
      fi
  fi
}
export -f croclog


function c2_notify(){
  C2NOTIFY INFO "${1}"
}
export -f c2_notify

function init_default_croc_config(){
  touch "${CROC_CONFIG_PATH}"
cat <<EOF >> "$CROC_CONFIG_PATH"
#!/bin/bash
#######################################
#      _-^^-_                         #
#  ---=>====<^^..                     #
#      "    "      Key Croc by Hak5   #
#######################################
#This configuration file is used to set default variables

DUCKY_LANG us

### OPTIONAL CONFIGURATION ###
#
############ NETWORK ############
#
# SSH [DISABLE, ENABLE]
#   (Disabled by default)
#   (Enable to allow SSH access in attack mode)
#
# WIFI_SSID [network name]
#
# WIFI_PASS [network password]
#   (Omit WIFI_PASS for open networks)
#   (Omit both WIFI_SSID and WIFI_PASS to disable)
#
# DNS [address 1] [address 2]
#
#
############ DEVICE CONFIG ############
# NOTE: VID AND PID SHOULD BE SET TOGETHER,
# AND WILL DISABLE AUTO VID/PID CLONING
#
# VID [VID_0X<vid hex>]
#
# PID [PID_0X<pid hex>]
#
# MAN [MAN_label]
#
# PROD [PROD_label]
#
#
############ PROTECTED ARMING MODE ############
# WARNING: MISCONFIGURATIONS BELOW WILL
# LOCK YOU OUT OF YOUR DEVICE.
#
# ARMING_PASS [password]
# Requires [password] to typed on the keyboard attached to the Key Croc to enter arming mode.
#
# ARMING_TIMEOUT [seconds]
# (OPTIONAL WITH ARMING_PASS) Defining this adds a timeout to the protected arming mode listener
#
# EXAMPLE:
# ARMING_PASS hak5croc
# ARMING_TIMEOUT 5
#
# This configuration will give you 5 seconds to press the button after typing hak5croc on the keyboard
# attached to the Key Croc
#
#
# ### ADDITIONAL HELP ###
# https://www.hak5.org/croc-help
EOF
}

function startup_vid_pid_detection(){
  croclog "Updating LED to reflect Keyboard state"
  /usr/local/croc/bin/KEYBOARD
  if [[ ! -f "/tmp/vidpid.lock" ]]; then
    croclog "No VID/PID defined in config.txt"
    croclog "Startup - Begin keyboard detection and cloning"
    keyboard_detected=0
#*****************************************************************************************
    counter=0
#*****************************************************************************************
    while [ "${keyboard_detected}" -eq "0" ];  do
      croclog "Checking for keyboard"
#*****************************************************************************************
      if [ "${1}" = "matchless" ] && [ "${counter}" -gt "3" ]; then
        croclog "Stopping HID detection after 3 seconds since in matchless mode"
        return
      fi
#*****************************************************************************************
      if [ ! -z "$(lsusb | grep -v 'Linux' | grep -v 'Realtek' | awk '{print $6}')" ]; then
        croclog "Startup - Detected attached device"
        # we need a way to detect a realtek keyboard (if that exists) still
        if [ ! -z "$(lsusb -v -d $(lsusb | grep -v 'Linux' | grep -v 'Realtek' | awk '{print $6}') | grep 'bInterfaceProtocol' | grep 'Keyboard')" ]; then
          croclog "Startup - Keyboard Detected"
          keyboard_detected=1
        fi
      fi
      if [ "${keyboard_detected}" -eq "0" ]; then
        sleep 1
      fi
#*****************************************************************************************
      if [ "${1}" = "matchless" ]; then
        counter=$((counter+1))
      fi
#*****************************************************************************************
      croclog "Startup - Waiting for keyboard..."
    done
    croclog "Cloning VID/PID of attached keyboard"
    VIDPID=$(lsusb | grep -v "Linux" | grep -v "Realtek" | awk '{print $6}')
    VIDHEX="$(echo "${VIDPID}" | cut -d: -f1| tr a-z A-Z)"
    PIDHEX="$(echo "${VIDPID}" | cut -d: -f2| tr a-z A-Z)"
    if [[ ! -z "${VIDHEX}" ]] && [[ ! -z "${PIDHEX}" ]]; then
      VID="VID_0X${VIDHEX}"
      PID="PID_0X${PIDHEX}"
      croclog "Automatic VID PID result: ${VID} ${PID}"
      c2_notify "Startup VID/PID Cloned: ${VID} ${PID}"
    fi
#*****************************************************************************************
    echo -n "${VIDPID}" > /tmp/vidpid
#*****************************************************************************************
    touch /tmp/keyboard.present
    /usr/local/croc/bin/KEYBOARD
    croclog "Keyboard setup complete"
  else
    croclog "Skipping automatic cloning, vid/pid set in config.txt"
    c2_notify "VID/PID Locked via config.txt: ${VID} ${PID}"
  fi
}

function parse_config(){
  croclog "Parsing config.txt"
  if [ -f "$CROC_CONFIG_PATH" ]; then
    croclog "$CROC_CONFIG_PATH exist"
    while IFS= read -r line
    do
      croclog "Parsing: $line"
      if [[ $line == \#* ]]; then
      continue
      fi
      if [[ "$line" == WIFI_SSID* ]]; then
          WIFI_SSID="$(echo "$line"| cut -d ' ' -f2-)"
                croclog "SSID DETECTED ${WIFI_SSID}"
          continue
      fi
      if [[ "$line" == WIFI_PASS* ]]; then
          WIFI_PASS="$(echo "$line"| cut -d ' ' -f2-)"
          continue
      fi
#*****************************************************************************************
      if [[ "$line" == WIFI_AP* ]]; then
          WIFI_AP="$(echo "$line"| cut -d ' ' -f2-)"
            croclog "WIFI AP OPTION DETECTED ${WIFI_AP}"
          continue
      fi
      if [[ "$line" == WIFI_HIDE_AP* ]]; then
          WIFI_HIDE_AP="$(echo "$line"| cut -d ' ' -f2-)"
            croclog "WIFI AP SSID BROADCAST OPTION DETECTED ${WIFI_HIDE_AP}"
          continue
      fi
      if [[ "$line" == MATCHLESS* ]]; then
          MATCHLESS="$(echo "$line"| cut -d ' ' -f2-)"
            croclog "MATCHLESS PAYLOADS OPTION DETECTED ${MATCHLESS}"
          continue
      fi
      if [[ "$line" == DUCKY_LANG* ]]; then
          DUCKY_LANG="$(echo "$line"| cut -d ' ' -f2- | awk '{print tolower($0)}')"
          export DUCKY_LANG="$DUCKY_LANG"
          sed -i "/export DUCKY_LANG/d" /root/.profile
          echo "export DUCKY_LANG=${DUCKY_LANG}" >> /root/.profile
                croclog "LANGUAGE DETECTED ${DUCKY_LANG}"
          continue
      fi
      if [[ "$line" == AUTO_ATTACKMODE* ]]; then
          AUTO_ATTACKMODE="$(echo "$line"| cut -d ' ' -f2-)"
            croclog "AUTO_ATTACKMODE OPTION DETECTED ${AUTO_ATTACKMODE}"
          continue
      fi
#*****************************************************************************************
      if [[ "$line" == DEBUG* ]]; then
          DEBUG_MODE="true"
                croclog "DEBUG MODE ENABLED IN CONFIG.TXT"
          continue
      fi
      if [[ "$line" == SSH* ]]; then
        SSH="$(echo "$line"| cut -d ' ' -f2-)"
              croclog "SSH OPTION DETECTED ${SSH}"
        continue
      fi
      if [[ "$line" == DNS* ]]; then
        DNS="$(echo "$line"| cut -d ' ' -f2-)"
              croclog "DNS OPTION DETECTED ${SSH}"
        continue
      fi
      if [[ "$line" == VID* ]]; then
        VID="$(echo "$line"| cut -d ' ' -f2-)"
              croclog "VID OPTION DETECTED ${SSH}"
        continue
      fi
      if [[ "$line" == PID* ]]; then
        PID="$(echo "$line"| cut -d ' ' -f2-)"
              croclog "PID OPTION DETECTED ${SSH}"
        continue
      fi
      if [[ "$line" == PROD* ]]; then
        PROD="$(echo "$line"| cut -d ' ' -f2-)"
              croclog "PROD OPTION DETECTED ${SSH}"
        continue
      fi
      if [[ "$line" == MAN* ]]; then
        MAN="$(echo "$line"| cut -d ' ' -f2-)"
              croclog "MAN OPTION DETECTED ${SSH}"
        continue
      fi
      # Arming mode lock detection
      # if this line exists, the framework will not automatically call
      # wait_for_arming_mode()
      # Arming mode will be handled internally by other services
      if [[ "$line" == ARMING_PASS* ]]; then
          ARMING_PASS="$(echo "$line"| cut -d ' ' -f2-)"
                croclog "ARMING MODE PASSWORD DETECTED"
          continue
      fi
    done < "$CROC_CONFIG_PATH"

    # VID/PID Override - by setting VID/PID in the config.txt you are locking it
    if [[ -z "$VID" ]] || [[ -z "$PID" ]]; then
                  croclog "No VID/PID Override"
      VID=""
      PID=""
    else
                  croclog "VID/PID Defined in config.txt, locking it"
      touch /tmp/vidpid.lock
    fi

  else
    croclog "$CROC_CONFIG_PATH does not exist"
    init_default_croc_config
  fi
}

function reset_bootcount() {
  mkdir -p /mnt/bootcount
  mount -t vfat /dev/nanda /mnt/bootcount
  echo "0" > /mnt/bootcount/bootcnt.txt
  rm -f /mnt/bootcount/tar_fail.txt
  umount /dev/nanda
  rm -rf /mnt/bootcount
}

function enable_8812fu(){
  croclog "Setting up 8812"
  # Enable rtl8188fu power by gpio PA6 and insmod driver
  echo 6 > /sys/class/gpio/export
  echo out > /sys/class/gpio/gpio6/direction
  echo 1 > /sys/class/gpio/gpio6/value
  insmod /usr/local/croc/lib/8188fu.ko
}

#HELPER########################################################
# MOUNT_UDISK
# Mounts udisk and handles syncing /root/loot/ and /root/udisk/loot
#
###############################################################
function MOUNT_UDISK() {
  croclog "Mounting udisk"
  mkdir -p /root/udisk
  mount -o sync /dev/nandf /root/udisk
  mkdir /root/loot
  # sync udisk to /root/loot
  cp -rf /root/udisk/loot/* /root/loot/
  rm /etc/device.config
  cp /root/udisk/device.config /etc/device.config
}
export -f MOUNT_UDISK

#HELPER########################################################
# UNMOUNT_UDISK
# Safely Unmounts udisk
#
###############################################################
function UNMOUNT_UDISK() {
  croclog "Unmounting udisk"
  sync
  udisk unmount
}
export -f UNMOUNT_UDISK


#HELPER########################################################
# UPDATE_LANGUAGES
# Copy language files from udisk to the croc
#
###############################################################
function UPDATE_LANGUAGES() {
  croclog "Updating croc languages..."
  cp -f /root/udisk/languages/*.json /usr/local/croc/lib/languages/
  croclog "Languages copied..."
}
export -f UPDATE_LANGUAGES

function init_croc() {
  croclog "Croc Init"
  reset_bootcount
  enable_8812fu
  insmod /usr/local/croc/lib/netlink_transfer.ko
  insmod /usr/local/croc/lib/usbhid.ko
  echo 0 > /sys/bus/platform/devices/sunxi_usb_udc/otg_role
  echo 0 > /proc/sys/kernel/hung_task_timeout_secs
  echo ondemand | tee /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor &> /dev/null
  echo 0 | tee /sys/devices/system/cpu/cpu{1..3}/online
  dmesg -c > /dev/null
}


#HELPER########################################################
# ENABLE_INTERFACE
# Enables wlan0
#
###############################################################
function ENABLE_INTERFACE(){
  croclog "wlan0 up"
  ifconfig wlan0 up
}
export -f ENABLE_INTERFACE

function configure_dns(){
  croclog "Configuring DNS"
  addresses=(${DNS})
  output=""
  for i in "${addresses[@]}"
  do
    output="${output}nameserver ${i}\n"
  done
  croclog "Adding: ${output}"
  echo -e "${output}" > /etc/resolvconf/resolv.conf.d/tail
  croclog "Restarting resolvconf service"
  systemctl restart resolvconf.service
}

#HELPER########################################################
# CLEAR_WIFI_CONFIG
# Remove wpa_supplicant.conf to clear current wireless configuration
#
###############################################################
function CLEAR_WIFI_CONFIG(){
   croclog "Clearing wpa_supplicant.conf"
   rm  $WIFI_CONFIG_PATH
   sync
}
export -f CLEAR_WIFI_CONFIG

#*****************************************************************************************

#HELPER########################################################
# CLEAR_AP_CONFIG
# Empty hostapd.conf and dnsmasq.conf (or create empty file) to clear current AP configuration
#
###############################################################
function CLEAR_AP_CONFIG(){
   croclog "Clearing hostapd.conf"
   echo "" > $AP_CONFIG_PATH
   sync
}
export -f CLEAR_AP_CONFIG

#*****************************************************************************************

#HELPER########################################################
# CONFIG_OPEN_WIFI
# Generate a wpa_supplicant.conf for open wifi
# Example: CONFIG_OPEN_WIFI 'attwifi'
#
###############################################################
function CONFIG_OPEN_WIFI(){
  CLEAR_WIFI_CONFIG
  croclog "Populating wpa_supplicant.conf for open network"
  echo "network={" >> "${WIFI_CONFIG_PATH}"
  echo "          ssid=\"${WIFI_SSID}\"" >> "${WIFI_CONFIG_PATH}"
  echo "          priority=1" >> "${WIFI_CONFIG_PATH}"
  echo "}" >> "${WIFI_CONFIG_PATH}"
}
export -f CONFIG_OPEN_WIFI

#HELPER########################################################
# CONFIG_PSK_WIFI
# Generate a wpa_supplicant.conf for psk wifi
# Example: CONFIG_PSK_WIFI 'attwifi' 'password'
#
###############################################################
function CONFIG_PSK_WIFI(){
  CLEAR_WIFI_CONFIG
  croclog "Populating wpa_supplicant.conf for psk network"
  echo "network={" >> $WIFI_CONFIG_PATH
  echo "          ssid=\"${WIFI_SSID}\"" >> $WIFI_CONFIG_PATH
  echo "          psk=\"${WIFI_PASS}\"" >> $WIFI_CONFIG_PATH
  echo "          priority=1" >> $WIFI_CONFIG_PATH
  echo "}" >> $WIFI_CONFIG_PATH
}
export -f CONFIG_PSK_WIFI

#*****************************************************************************************

#HELPER########################################################
# CONFIG_AP_WIFI
# Generate a hostapd.conf and dnsmasq.conf for an protected/unprotected, hidden/broadcasted wifi AP, hosted on the Key Croc
# Example: CONFIG_PSK_WIFI 'attwifi' 'password'
#
###############################################################

function CONFIG_AP_WIFI(){
  CLEAR_AP_CONFIG
  croclog "Populating hostapd.conf for wifi AP"
  echo "interface=wlan0" >> $AP_CONFIG_PATH
  echo "driver=nl80211" >> $AP_CONFIG_PATH
  echo "hw_mode=g" >> $AP_CONFIG_PATH
  # echo "country_code=DE" >> $AP_CONFIG_PATH
  echo "ssid=${WIFI_SSID}" >> $AP_CONFIG_PATH
  echo "channel=7" >> $AP_CONFIG_PATH
  echo "wpa=2" >> $AP_CONFIG_PATH
  echo "wpa_passphrase=${WIFI_PASS}" >> $AP_CONFIG_PATH
  echo "wpa_key_mgmt=WPA-PSK" >> $AP_CONFIG_PATH
  echo "wpa_pairwise=TKIP" >> $AP_CONFIG_PATH
  echo "rsn_pairwise=CCMP" >> $AP_CONFIG_PATH
  echo "auth_algs=1" >> $AP_CONFIG_PATH
  echo "macaddr_acl=0" >> $AP_CONFIG_PATH
  if [[ "$WIFI_HIDE_AP" == "ENABLE" ]]; then
    echo "ignore_broadcast_ssid=1" >> $AP_CONFIG_PATH
  else
    echo "ignore_broadcast_ssid=0" >> $AP_CONFIG_PATH
  fi
  sync
}
export -f CONFIG_AP_WIFI

#*****************************************************************************************

#HELPER########################################################
# START_WLAN_DHCP
# Start dhcp on wlan0
#
###############################################################
function START_WLAN_DHCP(){
  croclog "Starting dhclient on wlan0"
  sleep 2
  dhclient wlan0 &
  croclog "dhclient backgrounded"
}
export -f START_WLAN_DHCP

#HELPER########################################################
# ENABLE_WIFI
# Enable wifi helper
# configures wpa_supplicant, indicates using LED,
# enables interface, starts wpa_supplicant and dhcp
#
# Example psk: ENABLE_WIFI 'attwifi' 'password'
#
# Example open: ENABLE_WIFI 'attwifi'
#
###############################################################
function ENABLE_WIFI(){
  croclog "Enabling WiFi"
  if [ -z "${2}" ]; then
    # no psk, config open
    CONFIG_OPEN_WIFI "${1}"
  else
    # ssid + psk
    CONFIG_PSK_WIFI "${1}" "${2}"
  fi
  LED C
  sync
  ENABLE_INTERFACE
  # start wpa_supplicant in the background
  killall hostapd
  sleep 2
  wpa_supplicant -Dnl80211 -iwlan0 -c/etc/wpa_supplicant.conf -B
  START_WLAN_DHCP
}
export -f ENABLE_WIFI

#*****************************************************************************************

#HELPER########################################################
# ENABLE_WIFI_WP
# Enable wifi AP helper
# checks hostapd installation and installs if not found, configures hostapd configuration,
# indicates using LED, enables interface, starts hostapd
#
###############################################################

function ENABLE_WIFI_AP(){
  croclog "Enabling Wifi AP"
  LED Y TRIPLE
  sleep 3
  status="$(dpkg-query -W --showformat='${db:Status-Status}' "hostapd" 2>&1)"
  if [ ! $? = 0 ] || [ ! "$status" = installed ]; then
    LED R TRIPLE
    croclog "hostapd is not installed, please install manually to use this firmware mod. SKIPPING further setup."
    return
  fi
  killall wpa_supplicant
  sleep 2  
  CONFIG_AP_WIFI
  sync
  croclog "Upping wlan0 with address 172.16.32.1"
  ifconfig wlan0 "172.16.32.1" up
  sleep 2
  croclog "Starting hostapd"
  killall hostapd
  sleep 1
  hostapd -d -B $AP_CONFIG_PATH
  sleep 3
  systemctl start isc-dhcp-server
  sleep 1
  LED G TRIPLE
  crolog "AP should be running!"
}
export -f ENABLE_WIFI_AP

#*****************************************************************************************

function setup_wifi(){
  croclog "Configuring WiFi"
#*****************************************************************************************
  croclog "WIFIAP VALUE ${WIFI_AP}"
  if [[ "$WIFI_AP" == "ENABLE" ]]; then
  # password in /etc/hostapd.conf
  ENABLE_WIFI_AP
        return
#*****************************************************************************************
  elif [[ -z "${WIFI_SSID}" ]]; then
  if [[ -z "${WIFI_PASS}" ]]; then
    croclog "WiFi not configured"
    return
  fi
  fi
  ENABLE_WIFI "${WIFI_SSID}" "${WIFI_PASS}"
}

#HELPER########################################################
# DISABLE_SSH
# Disable SSH service
#
###############################################################
function DISABLE_SSH(){
  croclog "Stopping SSH"
  /etc/init.d/ssh stop &
}
export -f DISABLE_SSH

#HELPER########################################################
# ENABLE_SSH
# Enable SSH service
#
###############################################################
function ENABLE_SSH(){
  croclog "Starting SSH"
  /etc/init.d/ssh start &
}
export -f ENABLE_SSH

function setup_ssh(){
  croclog "Configuring SSH"
  if [[ "$SSH" == "ENABLE" ]]; then
    ENABLE_SSH
  else
    DISABLE_SSH
  fi
}

function auto_attack_mode_hid(){
#*****************************************************************************************
  if [[ "$AUTO_ATTACKMODE" == "ENABLE" ]]; then
#*****************************************************************************************
    croclog "Entering Attack mode HID..."
    params=""
    if [ ! -z "${VID}" ]; then
      params="${params} ${VID}"
    fi
    if [ ! -z "${PID}" ]; then
      params="${params} ${PID}"
    fi
    if [ ! -z "${PROD}" ]; then
      params="${params} ${PROD}"
    fi
    if [ ! -z "${MAN}" ]; then
      params="${params} ${MAN}"
    fi

    if [ ! -z "${params}" ];then
      ATTACKMODE HID "${params}"
      croclog "ATTACKMODE HID ${params}"
    else
      ATTACKMODE HID
      croclog "ATTACKMODE HID"
    fi
#*****************************************************************************************
  else
    croclog "Auto Attack mode HID is DISABLED. Skipping."
  fi
#*****************************************************************************************
}

function check_storage_space(){
  space_left=$(/bin/df -h|/bin/grep 'udisk'|/usr/bin/awk '{print $5}')
  if [[ "${space_left}" == "%100" ]]; then
    if [[ "${STORAGE_FULL}" == "true" ]];then
            return
    fi
    STORAGE_FULL="true"
    c2_notify "Storage Full"
    LED Y
  fi
}

function watch_storage_space(){
  croclog "Watching storage space..."
  count=0
  while (true); do
      count=$((count+1))
      if [[ $count -gt 10 ]]; then
          check_storage_space
    count=0
      fi
      sleep .5
  done
}

function default_arming_mode_listener(){
  if [ "${ARMING_PASS}" == "" ]; then
    croclog "Default: Waiting to go into Arming mode..."
    sleep 3
    /usr/local/croc/bin/WAIT_FOR_BUTTON_PRESS
    croclog "Entering Arming mode..."
    c2_notify "Entering Arming Mode"
    /usr/local/croc/bin/ARMING_MODE
  else
    croclog "ARMING MODE PROTECTED"
  fi
}

function start_c2_if_configured(){
  sleep 5
  if [[ -f "/root/udisk/device.config" ]]; then
    croclog "device.config detected on udisk, Starting C2 Client"
    /usr/bin/cc-client /root/udisk/device.config &
  fi
}

function execute_non_match_payloads(){
#*****************************************************************************************
  if [[ "$MATCHLESS" == "DISABLE" ]]; then
    croclog "Matchless payloads are disabled from config. Any present matchless payloads are skipped."
    return
  fi
  croclog 'Locating any non-MATCH payloads to execute at startup'
  files=$(find /root/udisk/payloads -type f -not \( -iname "DISABLED*" \) | xargs grep -cHP '^(?=[\s]*+[^#])[^#]*(MATCH)' | grep 0$ | cut -d':' -f1)
  if [ -z "$files" ]; then
    croclog "No enabled matchless payloads found!"
    return
  fi
  startup_vid_pid_detection matchless
  auto_attack_mode_hid
  source /usr/local/croc/bin/GET
  export -f GET
  for p in "${files}"
  do
# {       <<< uncomment to enable background fork processes
    if [[ "${p}" != "0" ]]; then
      croclog "Starting non-match payload ${p}"
      $p
      croclog "Finished non-match payload ${p}"
    fi
# } &     <<< uncomment to enable background fork processes
  done
#*****************************************************************************************
  croclog 'non-MATCH payload search and start complete'
}

function execute_install_script(){
  croclog 'Locating install.sh to execute at startup'
  if [[ -f /root/udisk/tools/install.sh ]]; then
    croclog "Starting install.sh"
    LED M SLOW
    /bin/bash -c "/root/udisk/tools/install.sh"
    croclog "install.sh running"
  fi
}

function start_processing_keys(){
  croclog "Starting key parser..."
  if [[ "${DEBUG_MODE}" == "true" ]]; then
    python /usr/local/croc/croc.py DEBUG &
  else
    python /usr/local/croc/croc.py &
  fi
}

function validate_payloads() {
  croclog "Validating payloads before starting parser"
  CHECK_PAYLOADS
  status=$?
  if [ $status -eq 0 ]; then
    croclog "PAYLOADS VALID, making sure of correct EOL..."
    find /root/udisk/payloads -type f -exec sed -i 's/\r$//' {} +
    croclog "Done"
  else
    croclog "PAYLOADS INVALID"
    LED R SLOW
    while true; do
      sleep 2
    done
  fi
}

function HELPERS() {
echo "Available helper functions provided by sourcing croc_framework"
echo ""
echo " MOUNT_UDISK"
echo " Mounts udisk and handles syncing /root/loot/ and /root/udisk/loot"
echo ""
echo " UNMOUNT_UDISK"
echo " Safely Unmounts udisk"
echo ""
echo " UPDATE_LANGUAGES"
echo " Copy language files from udisk to the croc "
echo ""
echo " ENABLE_INTERFACE"
echo " Enables wlan0"
echo ""
echo " CLEAR_WIFI_CONFIG"
echo " Remove wpa_supplicant.conf to clear current wireless configuration"
echo ""
echo " CONFIG_OPEN_WIFI"
echo " Generate a wpa_supplicant.conf for open wifi"
echo " Example: CONFIG_OPEN_WIFI 'attwifi'"
echo ""
echo " CONFIG_PSK_WIFI"
echo " Generate a wpa_supplicant.conf for psk wifi"
echo " Example: CONFIG_PSK_WIFI 'attwifi' 'password'"
echo ""
echo " START_WLAN_DHCP"
echo " Start dhcp on wlan0"
echo ""
echo " ENABLE_WIFI"
echo " Enable wifi helper"
echo " configures wpa_supplicant, indicates using LED,"
echo " enables interface, starts wpa_supplicant and dhcp"
echo " Example psk: ENABLE_WIFI 'attwifi' 'password'"
echo " Example open: ENABLE_WIFI 'attwifi'"
echo ""
echo " DISABLE_SSH"
echo " Disable SSH service"
echo ""
echo " ENABLE_SSH"
echo " Enable SSH service"
echo ""
}
export -f HELPERS
###############################################################
# Entry point
###############################################################
function chomp() {
  touch /tmp/attackmode
  LED G
  sleep 1.5
  LED M
  init_croc
  MOUNT_UDISK
  watch_storage_space &
  parse_config
  default_arming_mode_listener &
  UPDATE_LANGUAGES
  configure_dns
  setup_wifi
  setup_ssh
  start_c2_if_configured &
  validate_payloads
  execute_install_script &
#*****************************************************************************************
  execute_non_match_payloads # & - uncomment to enable background loop (e.g. start key parser right away)
  # BACK_PID=$!
  # while ps -p $BACK_PID > /dev/null; do sleep 1; done;
#*****************************************************************************************
  startup_vid_pid_detection
  auto_attack_mode_hid
  start_processing_keys
  disown
}

if [ ! -z "${1}" ]; then
  chomp
  while true; do
        sleep 1
  done
  croclog "Croc Framework Exited..."
fi
